
import transport.*;

import java.util.Arrays;

/*
Задание 1
Создайте основу приложения для автогонок.

В качестве фундамента структуры классов и данных возьмите реализацию из прошлого урока с классом
Transport
 и его наследниками.

Сделайте класс
Transport
 абстрактным. Дополните реализацию новыми вводными. Все параметры и методы, которые не прописаны в текущем задании, закомментируйте или удалите.

В автогонках могут участвовать несколько видов авто. Для каждого из них нужно создать отдельный класс:

«Легковые автомобили»,
«Грузовые автомобили»,
«Автобусы».
Авто всех трех групп имеют параметры:

«Марка»,
«Модель»,
«Объем двигателя».
Также все авто имеют:

метод «начать движение»,
метод «закончить движение».
Подсказка
Так как остальные параметры и методы нам не важны, их можно удалить или закомментировать.


Для каждого вида авто (легковые, грузовые и автобусы) создайте по 4 объекта с произвольными параметрами.


Подсказка
Не забудьте настроить модификаторы доступа, добавить геттеры и сеттеры, а также проверку данных. Не забудьте переопределять методы.

Критерии проверки
Класс
Transport
 — абстрактный.
Создан класс «Легковые автомобили».
Создан класс «Грузовые автомобили».
Создан класс «Автобусы».
Создано по 4 объекта с произвольными параметрами для каждого класса.
Все лишние параметры и методы, которые не указаны в данном задании, закомментированы.
----------------------------------------------------------------
Задание 2
Создайте для приложения интерфейс «Соревнующийся». В нем создайте методы с типом возвращаемого значения
void
:

«Пит-стоп»,
«Лучшее время круга» (для каждого участника гонок),
«Максимальная скорость» (для каждого участника гонок).
Критерии проверки
Создан интерфейс «Соревнующийся».
Интерфейс «Соревнующийся» имеет метод «Пит-стоп».
Интерфейс «Соревнующийся» имеет метод «Лучшее время круга».
Интерфейс «Соревнующийся» имеет метод «Максимальная скорость».
Методы имеют тип возвращаемого значения
void
------------------------------------------------------------------

Задание 3
Реализуйте интерфейс «Соревнующийся» для классов «Легковые автомобили», «Грузовые автомобили» и «Автобусы». Все методы интерфейса должны быть переопределены.

Укажите реализацию каждого метода в виде вывода информационных сообщений в консоль.


Критерии проверки
Интерфейс «Соревнующийся» реализован для класса «Легковые автомобили».
Все методы интерфейса переопределены для класса «Легковые автомобили».
Информация по каждому объекту класса выводится в консоль.
Интерфейс «Соревнующийся» реализован для класса «Грузовые автомобили».
Все методы интерфейса переопределены для класса «Грузовые автомобили».
Информация по каждому объекту класса выводится в консоль.
Интерфейс «Соревнующийся» реализован для класса «Автобусы».
Все методы интерфейса переопределены для класса «Автобусы».
Информация по каждому объекту класса выводится в консоль.

 -------------------------------------------------------------------

 Задание 4
Создайте общий класс «Водитель», который будет иметь следующие параметры:

«ФИО» водителя,
«Наличие водительских прав»,
«Стаж».
Создайте еще три класса для водителей с разными типами водительских правам:

для легковых авто нужна категория В;
для грузовых нужна категория С;
для автобусов — D.
Все водители должны иметь:

метод «начать движение»,
метод «остановиться»,
метод «заправить авто».
Также должны быть соблюдены следующие условия:

Водитель с определенным типом водительских прав может управлять только авто из своей категории.
Управлять авто других категорий в наших соревнованиях он не может.
В классах авто в качестве дженериков нужно указать класс водителя с определенной водительской категорией.
Теперь напишите приложение, которое выводит в консоль информацию в формате:

“водитель А управляет автомобилем Б и будет участвовать в заезде”
В качестве выполненного задания прикрепите на платформе ссылку на pull-request вашего проекта в GitHub.


Критерии проверки
Реализован класс «Водитель» с набором параметров и методов.
Реализован класс «Водитель категории B».
Реализован класс «Водитель категории C».
Реализован класс «Водитель категории D».
Приложение выводит в консоль сообщение: “водитель X управляет автомобилем Y и будет участвовать в заезде”.

* * */

public class Main {
    public static void main(String[] args) {
        Car[] car = new Car[7];         /// массив для объекто класса Car
//        Car.Key[] key = new Car.Key[7];  /// массив для объекто класса Car.Key - если бы класс Key был статическим

        Bus[] bus = new Bus[3];         /// массив для объекто класса Bus

        car[0] = new Car("Lada","Granta",1.7F,"желтый",2015,"Россия",
                "manual", "sedan", "RTY1357908642", "5 человек+3 багажа", true, 180
//                , new Car.Key(true , true)  // если бы класс Key был статическим можно создавать его объекты прямо в конструкторе внешн. класса
        );
        // если класс Key  НЕстатический - создаём его ВНЕ конструктора внешн.класса, т.к. сначала нужно создать объект внешн.класса , здесь - car[0]
        // создаём объект класса Key в объекте класса Car
        car[0].key = car[0].new Key(true,  false);

        System.out.println(car[0]);
        System.out.println(car[0].key);

        car[1] = new Car("Audi","A8 50 L TDI quattro",3F,"чёрный",2020,"Германия",
                "manual", "wagon", "RFV1354645642", "5 человек+3 багажа", true, 240
        );

        // создаём объект класса Key в объекте класса Car
        car[1].key = car[1].new Key(true, true);

        System.out.println(car[1]);
        System.out.println(car[1].key);

        car[2] = new Car("BMW","Z8",3F,"чёрный",2021,"Германия" ,
                "automatic", "cabriolet", "WSX4564654542", "2 человек+2 багажа", true, 288
        );
        car[3] = new Car("KIA","Sportage",2.4F,"красный",2018,"Южная Корея" ,
                "manual", "hatchback", "POI2349808642", "5 человек+3 багажа", true, 200
        );
        car[4] = new Car("Hyundai","Avante",1.6F,"оранжевый",2016,"Южная Корея",
                "automatic", "sedan", "FDY1357908665", "", true, 180
        );
        car[5] = new Car("Hewlett Packard","ColorJet",0,"",1998,"США"  ,
                "", "desktop", "FGDFGFDGFD642", "", false, 0
        );
        car[6] = new Car("Epson","FX - 900 ",0,"",1999,"",
                "", "standalone", "R-----3242342", "", false, 3
        );

        System.out.println(Arrays.toString(car));

        bus[0] = new Bus("Ikarus","Sport","малиновый","Венгрия",120 );
        bus[1] = new Bus("ЛАЗ","1970","Серый","СССР",70 );
        bus[2] = new Bus("Mercedes","Classic6S","серебристый","Германия",230 );

        System.out.println(Arrays.toString(bus));

    }
}